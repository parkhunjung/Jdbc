package com.test.etc;

public class Ex01_Lambda {
	
	public static void main(String[] args) {
		/*
		 
		 람다식
		 - 병렬 처리, 이벤트 처리, 스트림 처리 등에 사용
		 - JDK 1.8 지원
		 - 함수형 프로그래밍 방식을 지원하는 표현식 > 코딩 패턴이 다른 문법을 제공
		 - 익명 메소드를 작성하기 위해서 사용 > 재사용 목적x, 1회용 목적o > 1회용 메소드 제작이 목적!!
		 - 형태는 매개변수를 가지는 코드 블럭
		 - 자바에서 람다식은 [인터페이스 + 익명 객체 + 람다식]을 조합해서 사용한다.
		 - *** 1회용 익명 메소드
		 
		 
		 
		 람다식 기본 형태
		 - (자료형 변수명) -> {실행 코드;}
		 - (자료형 변수명) : 매개변수 부분
		 - -> Arrow, 매개변수 부분과 실행 코드블럭을 연결 역할, 호출하는 역할
		 - {실행 코드;} : 메소드 구현부
		 
		 람다식을 적용하기 위한 조건
		 - 인터페이스 변수 = 람다식;
		 
		 람다식에서 사용할 인터페이스
		 1. 반드시 추상 메소드가 유일해야 한다.(*********)
		 2. 람다식을 담는 인터페이스를 '람다식의 타겟 타입(Target Type)' 이라고 한다.
		 3. 람다식을 담는 인터페이스를 '함수적(형) 인터페이스(Functional Interface)'라고 한다.
		 4. 사용자 직접 정의 or 자바에서 제공
		 
		 
		 샘플
		 1. () -> {System.out.print();}
		 2. () -> System.out.print();
		 3. (int n) -> {System.out.println(n)};
		 4. (n) -> System.out.println(n);
		 */
		
		//익명 객체
		//인터페이스 변수 = new 인터페이스() {구현부;}
		MyInterface my1 = new MyInterface() {
			
			@Override
			public void test() {
				System.out.println("테스트입니다.");
			}
		};
		
		my1.test();
		my1.test();// 객체의 사용은 재사용이 가능하다.
		
		MyInterface my2 = new MyInterface() {
			
			@Override
			public void test() {
				//같은 형식이라도 다시 구현 // 객체의 생성은 재사용이 불가능하다. > 익명객체
			}
		};
		
		//인터페이스 변수 = 람다식;
		//** 자바는 메소드를 변수에 저장할 수 없다.
		//** 눈에는 안보이지만 람다식을 사용한 메소드는 자동으로 익명 객체가 생성이 되고 그 안에 메소드로 구현된다.
		//** 자밋 필요한 메소드를 선언해야하는 상황이 발생 > 메소드를 만드려면 자바는 클래스가 반드시 필요
		// > 익명 클래스(객체)를 이용해서 잠시 사용할 메소드를 만드는 방법을 선택 > 람다식 채택 > 생산성 + 유지보수 + 가독성
		MyType my3 = () -> {System.out.println("람다식 호출입니다.");};
		
		MyType my4 = new MyType() {
			
			@Override
			public void hello() {
				System.out.println("람다식을 호출합니다.");
			}
		};
		
		my3.hello();
		
		//람다식을 사용해서 구현한 메소드도 그냥 메소드이다.
		MyType my5 = () -> {
			System.out.println("시작");
			for (int i=0; i<10; i++) {
				System.out.println(i);
			}
			System.out.println("끝");
		};
		
		my5.hello();
		
		MyType my6 = () -> System.out.println("안녕하세요.람다식1줄");
		my6.hello();
		
		//람다식의 시그너처는 반드시 인터페이스의 추상 메소드와 일치해야 한다.(내부적으로 추상 메소드를 상속받아 구현 하는것이기 때문)
		//MyType my7 = (int n) -> System.out.println(n);
		
		
		
		
		
		YourType you1 = (String s) -> System.out.println(s);
		you1.talk("반갑습니다.");
		
		YourType you2 = (String s) -> {
			System.out.println(s.length());
			System.out.println(s);
		};
		you2.talk("실례합니다.");
		
		YourType you3 = (s) -> System.out.println(s);
		you3.talk("하하하하");
		
		
		
		
		HisType he1 = () -> {
			return "짜장면";
		};
		
		System.out.println(he1.getFood());
		
		
		HerType her1 = (int weight, int height) -> {
			double bmi = (double)weight / ((double)height / 100 * (double)height / 100);
			return Math.round(bmi);
		};
		
		System.out.println(her1.getBMI(70, 175));
		
		
		
		
	}
	
}


interface MyInterface {
	void test();
}

//매개변수 x, 반환값x
//*** 람다식에서 사용하는 인터페이스는 추상 메소드를 반드시 1개만 가져야 한다.
interface MyType {
	void hello();
	//void hi(int n);
}

//매개변수o, 반환값x
interface YourType{
	void talk(String s);
}

//매개변수x, 반환값o
interface HisType {
	String getFood();
}

//매개변수o, 반환값o
interface HerType{
	double getBMI(int weight, int height);
}









