package com.project2.teacher;

import com.project2.main.DBUtil;
import com.project2.main.TeacherDTO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class TeacherDAO {

	private Connection conn;
	private Statement stat;
	private PreparedStatement pstat;
	private TeacherView tview;
	
	
	public TeacherDAO() {

		try {
			DBUtil util = new DBUtil();
			this.conn = util.connect(DBUtil.SERVERIP, DBUtil.SERVERID, DBUtil.SERVERPW);
			this.stat = conn.createStatement();
			tview = new TeacherView();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("DAO.Constructor");
		}

	}

	// DB읽기 작업

	public boolean isConnected() {

		try {
			return !this.conn.isClosed();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return false;
	}

	public void close() {

		try {
			this.conn.close();

		} catch (Exception e) {
			System.out.println(e.toString());
		}

	}
	// 읽은거 닫기

	public ArrayList<TeacherDTO> teacherList() {
		try {
			
			
			String sql = "SELECT * FROM tblTeacher WHERE delete_status = '회원'";

			
			
			ResultSet rs = stat.executeQuery(sql);
			
			
			ArrayList<TeacherDTO> teacherList = new ArrayList<TeacherDTO>();
			
			// rs -> (복사) -> list
			while (rs.next()) {
				// 레코드 1개 -> DTO 1개
				TeacherDTO dto = new TeacherDTO();
				
				dto.setSeq(rs.getString("seq"));
				// 컬럼값 --> DTO 멤버변수
				dto.setName(rs.getString("name"));
				dto.setSsn(rs.getString("ssn"));
				dto.setTel(rs.getString("tel"));
				dto.setAddress(rs.getString("address"));
				dto.setRegdate(rs.getString("regdate"));
				dto.setDelete_status(rs.getString("delete_status"));

				teacherList.add(dto);
			}

			rs.close();
			
			return teacherList;

		} catch (Exception e) {
			System.out.println("TeacherDAO의 teacherList() : " + e.toString());
		}
		return null;

	}

	public void teacher_courseList(TeacherDTO dto) {
		try {
			
			String sql = "select distinct tc.seq as seq,  tct.title as title,tc.begindate|| ' ~ '||tc.enddate as period ,tc.status as status from tblcoursesubject tcs inner join tblteacher tt on tcs.teacherseq = tt.seq inner join tblcourse tc  on tc.seq = tcs.courseseq              inner join tblcoursetitle tct on tct.seq = tc.coursetitleseq                                           where tt.name = ? order by tc.begindate|| ' ~ '||tc.enddate";

//	         ResultSet rs = stat.executeQuery(sql);
			pstat = conn.prepareStatement(sql); // sql입력

			String answer = dto.getName();
			System.out.println(answer);

			pstat.setString(1, answer); // 변수 입력
			

			ResultSet rs = pstat.executeQuery();// SQL문 실행

			while (rs.next()) {

				System.out.printf("%s\t%s\t%s\n", rs.getString("seq"), rs.getString("title"),
						rs.getString("period"),rs.getString("status"));

			}
			rs.close();
			
		} catch (Exception e) {
			System.out.println("TeacherDAO의 teacher_courseList : " + e.toString());
		}

	}

	public int listChoose(String n) {

		String sql = "select subjectseq, (select subject_name from tblsubject where seq = cs.subjectseq) as subjectname, begindate || ' ~ ' || enddate as subjectperiod, etc as description  from tblCourseSubject cs where courseseq = ?";

		
		try {
			pstat = conn.prepareStatement(sql);

			System.out.println();
		
			pstat.setString(1, n); // 변수 입력
			
			ResultSet rs = pstat.executeQuery();
			tview.subjectTitle();
			
			
			while (rs.next()) {

				System.out.printf("%s\t%s\t%s\t%s\n", rs.getString("subjectseq"),rs.getString("subjectname"), rs.getString("subjectperiod"),
						rs.getString("description"));

			}
			
			rs.close();
			
		
			
			return pstat.executeUpdate();
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		return 0;
	}
	
	
//ArrayList 로 count넣고 executeUpadate 넣기!!
	
	public void SubjectChoose(String n, TeacherDTO teacher) {

		String sql = "select subjectseq, (select subject_name from tblsubject where seq = cs.subjectseq) as subjectname, begindate || ' ~ ' || enddate as subjectperiod, etc as description  from tblCourseSubject cs where courseseq = ? and teacherseq = (select seq from tblTeacher where name = ?)";

//		System.out.println(n);
		try {
			pstat = conn.prepareStatement(sql);

			System.out.println();
		
			pstat.setString(1, n); // 변수 입력
			pstat.setString(2, teacher.getName());
			ResultSet rs = pstat.executeQuery();
			tview.subjectTitle();
			while (rs.next()) {

				System.out.printf("%s\t%s\t%s\t%s\n", rs.getString("subjectseq"),rs.getString("subjectname"), rs.getString("subjectperiod"),
						rs.getString("description"));

			}
			rs.close();
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		

	}

	public void finalchoose(String sel, String subject) {
		
		String sql = "select      l.seq as seq,     s.name as name,      j.subject_name as subjectname,     (select \"출석점수\" from (SELECT learningseq,  (COUNT (case     when a.status = '출근' then 1 end ) + COUNT (CASE     WHEN a.status = '지각' then 1     when a.status = '외출' then 1     when a.status = '조퇴' then 1     when a.status = '병가' then 1     when a.status = '기타' then 1      END )*0.5) /(SELECT COUNT         (CASE             WHEN TO_CHAR(v.regdate, 'd') IN ('7', '1') THEN NULL             WHEN h.name is not null THEN NULL             ELSE 1         END) AS \"java교육기간의 평일수\" FROM (SELECT TO_DATE((select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd') + level -1 AS regdate FROM dual     CONNECT BY level <= (to_date((select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd')- TO_DATE((select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd') + 1)) v     LEFT OUTER JOIN tblholiday h         ON v.regdate = h.regdate)*20 as \"출석점수\" FROM TBLATTENDED a where intime between (select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?) and (select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?)  GROUP BY learningseq    order by learningseq) where learningseq = l.seq) as 출석점수,      (select count(*) from tblpilgianswer p         inner join tblpilgiexam e             on e.seq = p.pilgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq                     and p.answer = e.answer) * 2 as pilgi,     (select count(*) from tblsilgianswer p         inner join tblsilgiexam e             on e.seq = p.silgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq                     and p.answer = e.answer) * 4 as silgi,                               (select count(*) from tblpilgianswer p         inner join tblpilgiexam e             on e.seq = p.pilgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq                     and p.answer = e.answer) * 2 +     (select count(*) from tblsilgianswer p         inner join tblsilgiexam e             on e.seq = p.silgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq                     and p.answer = e.answer) * 4 +                     (select \"출석점수\" from (SELECT learningseq,  (COUNT (case     when a.status = '출근' then 1 end ) + COUNT (CASE     WHEN a.status = '지각' then 1     when a.status = '외출' then 1     when a.status = '조퇴' then 1     when a.status = '병가' then 1     when a.status = '기타' then 1      END )*0.5) /(SELECT COUNT         (CASE             WHEN TO_CHAR(v.regdate, 'd') IN ('7', '1') THEN NULL             WHEN h.name is not null THEN NULL             ELSE 1         END) AS \"java교육기간의 평일수\" FROM (SELECT TO_DATE((select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd') + level -1 AS regdate FROM dual     CONNECT BY level <= (to_date((select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd')- TO_DATE((select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd') + 1)) v     LEFT OUTER JOIN tblholiday h         ON v.regdate = h.regdate)*20 as \"출석점수\" FROM TBLATTENDED a where intime between (select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?) and (select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?)  GROUP BY learningseq    order by learningseq) where learningseq = l.seq)                                          as total from tblstudent s     inner join tbllearning l         on s.seq = l.studentseq             inner join tblCourse c                 on c.seq = l.courseseq                     inner join tblcoursesubject cs                         on c.seq = cs.courseseq                             inner join tblsubject j                                 on j.seq = cs.subjectseq                                              where c.seq = ? and cs.subjectseq = ?";
		try {
			pstat = conn.prepareStatement(sql);
			pstat.setString(1,sel ); 
			pstat.setString(2,subject ); 
			pstat.setString(3,sel ); 
			pstat.setString(4, subject); 
			pstat.setString(5,sel ); 
			pstat.setString(6,subject ); 
			pstat.setString(7,sel ); 
			pstat.setString(8,subject ); 
			pstat.setString(9,sel ); 
			pstat.setString(10,subject ); 
			pstat.setString(11,sel ); 
			pstat.setString(12,subject ); 
			pstat.setString(13,sel ); 
			pstat.setString(14,subject ); 
			pstat.setString(15,sel ); 
			pstat.setString(16,subject ); 
			pstat.setString(17,sel ); 
			pstat.setString(18,subject ); 
			pstat.setString(19,sel ); 
			pstat.setString(20,subject ); 
			pstat.setString(21,sel ); 
			pstat.setString(22,subject ); 
		
			
			ResultSet rs = pstat.executeQuery();
			
			while (rs.next()) {

				System.out.printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\n", rs.getString("seq"),rs.getString("name"), rs.getString("subjectname"),
						rs.getString("출석점수"),rs.getString("pilgi"),rs.getString("silgi"),rs.getString("total"));
				
				
				

			}
			rs.close();
			pstat.close();
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		
		
	}
	
	public void perscorego(String sel, String subject) {
		
		String sql = "select      l.seq as seq,     s.name as name,      j.subject_name as subjectname,     (select \"출석점수\" from (SELECT learningseq,  (COUNT (case     when a.status = '출근' then 1 end ) + COUNT (CASE     WHEN a.status = '지각' then 1     when a.status = '외출' then 1     when a.status = '조퇴' then 1     when a.status = '병가' then 1     when a.status = '기타' then 1      END )*0.5) /(SELECT COUNT         (CASE             WHEN TO_CHAR(v.regdate, 'd') IN ('7', '1') THEN NULL             WHEN h.name is not null THEN NULL             ELSE 1         END) AS \"java교육기간의 평일수\" FROM (SELECT TO_DATE((select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd') + level -1 AS regdate FROM dual     CONNECT BY level <= (to_date((select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd')- TO_DATE((select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd') + 1)) v     LEFT OUTER JOIN tblholiday h         ON v.regdate = h.regdate)*20 as \"출석점수\" FROM TBLATTENDED a where intime between (select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?) and (select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?)  GROUP BY learningseq    order by learningseq) where learningseq = l.seq) as 출석점수,       (select count(*) from tblpilgianswer p         inner join tblpilgiexam e             on e.seq = p.pilgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq                     and p.answer = e.answer) * 2 as pilgi,     (select count(*) from tblsilgianswer p         inner join tblsilgiexam e             on e.seq = p.silgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq                     and p.answer = e.answer) * 4 as silgi,                               (select count(*) from tblpilgianswer p         inner join tblpilgiexam e             on e.seq = p.pilgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq                     and p.answer = e.answer) * 2 +     (select count(*) from tblsilgianswer p         inner join tblsilgiexam e             on e.seq = p.silgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq                     and p.answer = e.answer) * 4 +                     (select \"출석점수\" from (SELECT learningseq,  (COUNT (case     when a.status = '출근' then 1 end ) + COUNT (CASE     WHEN a.status = '지각' then 1     when a.status = '외출' then 1     when a.status = '조퇴' then 1     when a.status = '병가' then 1     when a.status = '기타' then 1      END )*0.5) /(SELECT COUNT         (CASE             WHEN TO_CHAR(v.regdate, 'd') IN ('7', '1') THEN NULL             WHEN h.name is not null THEN NULL             ELSE 1         END) AS \"java교육기간의 평일수\" FROM (SELECT TO_DATE((select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd') + level -1 AS regdate FROM dual     CONNECT BY level <= (to_date((select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd')- TO_DATE((select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?), 'yyyy-mm-dd') + 1)) v     LEFT OUTER JOIN tblholiday h         ON v.regdate = h.regdate)*20 as \"출석점수\" FROM TBLATTENDED a where intime between (select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?) and (select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?)  GROUP BY learningseq    order by learningseq) where learningseq = l.seq)                                          as total , '0' as notattenance, '0.5' as halfattendance, '1' as attendance, '20' as attscore, '2' as pilgiscore, '4' as silgiscore from tblstudent s     inner join tbllearning l         on s.seq = l.studentseq             inner join tblCourse c                 on c.seq = l.courseseq                     inner join tblcoursesubject cs                         on c.seq = cs.courseseq                             inner join tblsubject j                                 on j.seq = cs.subjectseq                                              where c.seq = ? and cs.subjectseq = ?";
		
		try {
			String seq = "";
			String subjectname = "";
			String notattenance = "";
			String halfattendance ="";
			String attendance = "";
			String attscore = "";
			String pilgiscore ="";
			String silgiscore ="";
			
			pstat = conn.prepareStatement(sql);
			pstat.setString(1,sel ); 
			pstat.setString(2,subject ); 
			pstat.setString(3,sel ); 
			pstat.setString(4, subject); 
			pstat.setString(5,sel ); 
			pstat.setString(6,subject ); 
			pstat.setString(7,sel ); 
			pstat.setString(8,subject ); 
			pstat.setString(9,sel ); 
			pstat.setString(10,subject ); 
			pstat.setString(11,sel ); 
			pstat.setString(12,subject ); 
			pstat.setString(13,sel ); 
			pstat.setString(14,subject ); 
			pstat.setString(15,sel ); 
			pstat.setString(16,subject ); 
			pstat.setString(17,sel ); 
			pstat.setString(18,subject ); 
			pstat.setString(19,sel ); 
			pstat.setString(20,subject ); 
			pstat.setString(21,sel ); 
			pstat.setString(22,subject ); 
		
			
			ResultSet rs = pstat.executeQuery();
			
			while (rs.next()) {

				 seq = rs.getString("seq");
				subjectname = rs.getString("subjectname");
				 notattenance = rs.getString("notattenance");
				 halfattendance = rs.getString("halfattendance");
				 attendance = rs.getString("attendance");
				 attscore = rs.getString("attscore");
				 pilgiscore = rs.getString("pilgiscore");
				silgiscore = rs.getString("silgiscore");

			}
			
			System.out.printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",seq, subjectname, notattenance,halfattendance, halfattendance,halfattendance,halfattendance, halfattendance, attendance, attscore, pilgiscore,silgiscore);
			rs.close();
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		
	}

	public void answerJohae(String sel, String check1) {

		String sql = "select tpe.seq as seq, tpe.question as question,  tpe.answer as answer from tblpilgiexam tpe inner join tblcoursesubject tcs on tpe.coursesubjectseq = tcs.seq where tcs.courseseq = ? and tcs.subjectseq =?";
		try {
			pstat = conn.prepareStatement(sql);

			System.out.println();
		
			pstat.setString(1, sel); // 변수 입력
			pstat.setString(2, check1);
			ResultSet rs = pstat.executeQuery();
			
			tview.answerJohae();
			while (rs.next()) {

				System.out.printf("%s\t%s\t%s\n", rs.getString("seq"),rs.getString("question"), rs.getString("answer"));

			}
			rs.close();
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		
	}

	public void numberOfanswer(String sel, String choice1) {
		
		
		String sql = "select l.seq as seq, s.name as name, j.subject_name as subjectname,  (SELECT   (COUNT (case     when a.status = '출근' then 1 end ) + COUNT (CASE     WHEN a.status = '지각' then 1     when a.status = '외출' then 1     when a.status = '조퇴' then 1     when a.status = '병가' then 1     when a.status = '기타' then 1      END )*0.5) FROM TBLATTENDED a where a.learningseq = l.seq and a.intime between (select begindate from tblcoursesubject where courseseq = ? and subjectseq = ?) and (select enddate from tblcoursesubject where courseseq = ? and subjectseq = ?)  GROUP BY a.learningseq) as attendance,      (select count(*) from tblpilgianswer p         inner join tblpilgiexam e             on e.seq = p.pilgiexamseq                 where p.learningseq = l.seq and e.coursesubjectseq = cs.seq and p.answer = e.answer) as pilgi,     (select count(*) from tblsilgianswer p  inner join tblsilgiexam e on e.seq = p.silgiexamseq  where p.learningseq = l.seq and e.coursesubjectseq = cs.seq and p.answer = e.answer) as silgi from tblstudent s     inner join tbllearning l on s.seq = l.studentseq  inner join tblCourse c on c.seq = l.courseseq    inner join tblcoursesubject cs on c.seq = cs.courseseq inner join tblsubject j on j.seq = cs.subjectseq  where c.seq = ? and cs.subjectseq = ?";
		try {
			pstat = conn.prepareStatement(sql);

			System.out.println();
		
			pstat.setString(1,sel); // 변수 입력
			pstat.setString(2,choice1);
			pstat.setString(3,sel);
			pstat.setString(4,choice1);
			pstat.setString(5,sel);
			pstat.setString(6,choice1);
			
			ResultSet rs = pstat.executeQuery();
			
			while (rs.next()) {

				System.out.printf("%s\t%s\t%s\t%s\t%s\t%s\n", rs.getString("seq"),rs.getString("name"), rs.getString("subjectname"),rs.getString("pilgi"),rs.getString("silgi"),rs.getString("attendance"));

			}
			rs.close();
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		
	}

	public void answerSilgiJohae(String sel, String choice1) {
		String sql = "select tpe.seq, tpe.question, tpe.answer from tblsilgiexam tpe inner join tblcoursesubject tcs on tpe.coursesubjectseq = tcs.seq where tcs.courseseq = ? and tcs.subjectseq =?";
		
		try {
			pstat = conn.prepareStatement(sql);

			System.out.println();
		
			pstat.setString(1, sel); // 변수 입력
			pstat.setString(2, choice1);
			ResultSet rs = pstat.executeQuery();
			
			tview.answerJohae();
			while (rs.next()) {

				System.out.printf("%s\t%s\t%s\n", rs.getString("seq"),rs.getString("question"), rs.getString("answer"));

			}
			rs.close();
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
	}
//-----------------------------------------------------------------------------------
	public ArrayList<ScheduleDTO> schedule(TeacherDTO dto) {
		try {

			String sql = "SELECT c.seq as seq, ct.title as coursetitle, c.begindate || ' ~ ' || c.enddate as coursedate, "
					+ "r.name as roomname, s.subject_name as subjectname, cs.begindate || ' ~ ' || cs.enddate as subjectdate, "
					+ "    b.title subjectbook, (SELECT COUNT(*) FROM tbllearning l INNER JOIN tblstudent st ON st.seq = l.studentseq "
					+ "    WHERE l.courseseq = cs.courseseq AND l.ing = '진행중' AND st.delete_status = '회원'"
					+ "    ) AS studentsu" + " FROM tblcoursesubject cs" + " INNER JOIN tblteacher t"
					+ " ON cs.teacherseq = t.seq" + " INNER JOIN tblsubject s" + " ON s.seq = cs.subjectseq"
					+ " INNER JOIN tblcourse c" + " ON c.seq = cs.courseseq" + " INNER JOIN tblcoursetitle ct"
					+ " ON c.coursetitleseq = ct.seq" + " INNER JOIN tblroom r" + " ON r.seq = c.roomseq"
					+ " INNER JOIN tblbook b" + " ON b.seq = cs.bookseq" + " WHERE t.name = ?";

			pstat = conn.prepareStatement(sql);

			String answer = dto.getName();
			System.out.println(answer);

			pstat.setString(1, answer);

			ResultSet rs = pstat.executeQuery();

			ArrayList<ScheduleDTO> schedule = new ArrayList<ScheduleDTO>();

			while (rs.next()) {
				ScheduleDTO dtoo = new ScheduleDTO();

				dtoo.setSeq(rs.getString("seq")); // 컬럼값 -> DTO 멤버변수
				dtoo.setCoursetitle(rs.getString("coursetitle"));
				dtoo.setCoursedate(rs.getString("coursedate"));
				dtoo.setRoomname(rs.getString("roomname"));
				dtoo.setSubjectname(rs.getString("subjectname"));
				dtoo.setSubjectdate(rs.getString("subjectdate"));
				dtoo.setSubjectbook(rs.getString("subjectbook"));
				dtoo.setStudentsu(rs.getString("studentsu"));

				schedule.add(dtoo);
			}

			rs.close();
			return schedule;

		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return null;

	}

	public ArrayList<CourseDTO> course(TeacherDTO dto) {
		try {

	String sql = "select distinct tct.title as coursename,tc.begindate|| ' ~ '||tc.enddate as coursedate,tc.status as from tblcoursesubject tcs" + 
					" inner join tblteacher tt" + 
					" on tcs.teacherseq = tt.seq" + 
					" inner join tblcourse tc" + 
					" on tc.seq = tcs.courseseq" + 
					" inner join tblcoursetitle tct" + 
					" on tct.seq = tc.coursetitleseq" + 
					" where tt.name = ?" +
					" order by tc.begindate|| ' ~ '||tc.enddate";

			pstat = conn.prepareStatement(sql);

			String answer = dto.getName();
			System.out.println(answer);

			pstat.setString(1, answer);

			ResultSet rs = pstat.executeQuery();

			ArrayList<CourseDTO> course = new ArrayList<CourseDTO>();
		
			while (rs.next()) {
				CourseDTO dtoo = new CourseDTO();

				dtoo.setCoursename(rs.getString("coursename")); // 컬럼값 -> DTO 멤버변수
				dtoo.setCoursedate(rs.getString("coursedate"));
				dtoo.setStatus(rs.getString("status"));

				course.add(dtoo);
			}

			return course;

		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return null;
	}
////////////////////////////////////////////////////////////////////////
	
	
	public ArrayList<WholeDTO> whole(TeacherDTO dto) {
		try {

			String sql = "SELECT" + " TO_CHAR(a.intime,'yyyy-mm-dd') beginday," + " CASE "
					+ " WHEN TO_CHAR(a.intime,'hh24:mi') LIKE '00:00' THEN '없음'" + " ELSE TO_CHAR(a.intime,'hh24:mi')"
					+ " END AS begintime," + " CASE" + " WHEN TO_CHAR(a.outtime,'hh24:mi') LIKE '00:00' THEN '없음'"
					+ " ELSE TO_CHAR(a.outtime,'hh24:mi')" + " END AS endday," + " st.name AS name, a.status AS state"
					+ " FROM tblstudent st" + " INNER JOIN tbllearning l" + " ON l.studentseq = st.seq"
					+ " INNER JOIN tblattended a" + " ON a.learningseq = l.seq" + " INNER JOIN tblcourse c"
					+ " ON c.seq = l.courseseq" + " INNER JOIN tblcoursetitle ct" + " ON ct.seq = c.coursetitleseq"
					+ " inner join tblteacher tt on ct.seq = tt.seq where tt.name =?"
					+ " ORDER BY beginday";

			pstat = conn.prepareStatement(sql);

			String answer = dto.getName();
			System.out.println(answer);

			pstat.setString(1, answer);

			ResultSet rs = pstat.executeQuery();

			ArrayList<WholeDTO> whole = new ArrayList<WholeDTO>();

			while (rs.next()) {
				WholeDTO dtoo = new WholeDTO();

				dtoo.setBeginday(rs.getString("beginday"));
				dtoo.setBegintime(rs.getString("begintime"));
				dtoo.setEndday(rs.getString("endday"));
				dtoo.setName(rs.getString("name"));
				dtoo.setState(rs.getString("state"));

				whole.add(dtoo);
			}

			return whole;

		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return null;
	}

	/////////////////////////////////////////////////////////////
	
	public ArrayList<DayDTO> dayy(int year,int month,int day,TeacherDTO dto) {
		try {

			String sql = " SELECT" + 
					" DISTINCT TO_CHAR(a.intime,'yyyy-mm-dd') beginday," + 
					" CASE" + 
					" WHEN TO_CHAR(a.intime,'hh24:mi') LIKE '00:00' THEN '없음'" + 
					" ELSE TO_CHAR(a.intime,'hh24:mi')" + 
					" END AS intime," + 
					" CASE" + 
					" WHEN TO_CHAR(a.outtime,'hh24:mi') LIKE '00:00' THEN '없음'" + 
					" ELSE TO_CHAR(a.outtime,'hh24:mi')" + 
					" END AS outtime," + 
					" st.name AS name, a.status AS stats, ct.title AS course" + 
					" FROM tblstudent st" + 
					" INNER JOIN tbllearning l" + 
					" ON l.studentseq = st.seq" + 
					" INNER JOIN tblattended a" + 
					" ON a.learningseq = l.seq" + 
					" INNER JOIN tblcourse c" + 
					" ON c.seq = l.courseseq" + 
					" inner join tblcoursesubject cc" + 
					" on c.seq = cc.teacherseq" + 
					" inner join tblteacher bb" + 
					" on cc.teacherseq = bb.seq" + 
					" INNER JOIN tblcoursetitle ct" + 
					" ON ct.seq = c.coursetitleseq" + 
					" WHERE TO_CHAR(a.intime,'yyyy') = LTRIM(TO_CHAR(?, '0000')) and TO_CHAR(a.intime,'mm') = LTRIM(TO_CHAR(?, '00')) and TO_CHAR(a.intime,'dd') = LTRIM(TO_CHAR(?, '00'))" + 
					" and bb.name = ?" + 
					" ORDER BY beginday";
			
			
			pstat = conn.prepareStatement(sql);
			String answer = dto.getName();
			System.out.println(answer);

			
			pstat.setInt(1, year);
			pstat.setInt(2, month);
			pstat.setInt(3, day);
			pstat.setString(4, answer);
			
			ResultSet rs = pstat.executeQuery();

			ArrayList<DayDTO> dayy = new ArrayList<DayDTO>();

			while (rs.next()) {
				DayDTO dtoo = new DayDTO();
				dtoo.setBeginday(rs.getString("beginday"));
				dtoo.setIntime(rs.getString("intime"));
				dtoo.setOuttime(rs.getString("outtime"));
				dtoo.setName(rs.getString("name"));
				dtoo.setStats(rs.getString("stats"));
				dtoo.setCourse(rs.getString("course"));

				dayy.add(dtoo);
			}
			rs.close();
			return dayy;

		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return null;
	}
	
	
	public ArrayList<DayDTO> monthh(int year,int month,TeacherDTO dto) {
		try {

			String sql = "SELECT DISTINCT" + 
					" TO_CHAR(a.intime,'yyyy-mm-dd') beginday," + 
					" CASE" + 
					" WHEN TO_CHAR(a.intime,'hh24:mi') LIKE '00:00' THEN '없음'" + 
					" ELSE TO_CHAR(a.intime,'hh24:mi')" + 
					" END AS intime," + 
					" CASE" + 
					" WHEN TO_CHAR(a.outtime,'hh24:mi') LIKE '00:00' THEN '없음'" + 
					" ELSE TO_CHAR(a.outtime,'hh24:mi')" + 
					" END AS outtime," + 
					" st.name AS name, a.status AS stats, ct.title AS course" + 
					" FROM tblstudent st" + 
					" INNER JOIN tbllearning l" + 
					" ON l.studentseq = st.seq" + 
					" INNER JOIN tblattended a" + 
					" ON a.learningseq = l.seq" + 
					" INNER JOIN tblcourse c" + 
					" ON c.seq = l.courseseq" + 
					" inner join tblcoursesubject cc" + 
					" on c.seq = cc.teacherseq" + 
					" inner join tblteacher bb" + 
					" on cc.teacherseq = bb.seq" + 
					" INNER JOIN tblcoursetitle ct" + 
					" ON ct.seq = c.coursetitleseq" + 
					" WHERE TO_CHAR(a.intime,'yyyy') = LTRIM(TO_CHAR(?, '0000')) and TO_CHAR(a.intime,'mm') = LTRIM(TO_CHAR(?, '00'))" + 
					" and bb.name = ? ORDER BY TO_CHAR(a.intime,'yyyy-mm-dd')";
			pstat = conn.prepareStatement(sql);
			String answer = dto.getName();
			System.out.println(answer);
			
			pstat.setInt(1, year);
			pstat.setInt(2, month);
			pstat.setString(3, answer);
			
			ResultSet rs = pstat.executeQuery();

			ArrayList<DayDTO> monthh = new ArrayList<DayDTO>();

			
			while (rs.next()) {
				DayDTO dto1 = new DayDTO();

				dto1.setBeginday(rs.getString("beginday"));
				dto1.setIntime(rs.getString("intime"));
				dto1.setOuttime(rs.getString("outtime"));
				dto1.setName(rs.getString("name"));
				dto1.setStats(rs.getString("stats"));
				dto1.setCourse(rs.getString("course"));

				monthh.add(dto1);
			}
			rs.close();
			return monthh;

		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return null;
	}
	
	
	
	public ArrayList<DayDTO> yearr(int year,TeacherDTO dto) {
		try {

			String sql = "SELECT DISTINCT" + 
					" TO_CHAR(a.intime,'yyyy-mm-dd') beginday," + 
					" CASE" + 
					" WHEN TO_CHAR(a.intime,'hh24:mi') LIKE '00:00' THEN '없음'" + 
					" ELSE TO_CHAR(a.intime,'hh24:mi')" + 
					" END AS intime," + 
					" CASE" + 
					" WHEN TO_CHAR(a.outtime,'hh24:mi') LIKE '00:00' THEN '없음'" + 
					" ELSE TO_CHAR(a.outtime,'hh24:mi')" + 
					" END AS outtime," + 
					" st.name AS name, a.status AS stats, ct.title AS course" + 
					" FROM tblstudent st" + 
					" INNER JOIN tbllearning l" + 
					" ON l.studentseq = st.seq" + 
					" INNER JOIN tblattended a" + 
					" ON a.learningseq = l.seq" + 
					" INNER JOIN tblcourse c" + 
					" ON c.seq = l.courseseq" + 
					" inner join tblcoursesubject cc" + 
					" on c.seq = cc.teacherseq" + 
					" inner join tblteacher bb" + 
					" on cc.teacherseq = bb.seq" + 
					" INNER JOIN tblcoursetitle ct" + 
					" ON ct.seq = c.coursetitleseq" + 
					" WHERE TO_CHAR(a.intime,'yyyy') = LTRIM(TO_CHAR(?, '0000')) and bb.name = ?" + 
					" ORDER BY TO_CHAR(a.intime,'yyyy-mm-dd')";
			pstat = conn.prepareStatement(sql);
			String answer = dto.getName();
			System.out.println(answer);
			pstat.setInt(1, year);
			pstat.setString(2, answer);
			
			ResultSet rs = pstat.executeQuery();

			ArrayList<DayDTO> yearr = new ArrayList<DayDTO>();

			while (rs.next()) {
				DayDTO dto1 = new DayDTO();

				dto1.setBeginday(rs.getString("beginday"));
				dto1.setIntime(rs.getString("intime"));
				dto1.setOuttime(rs.getString("outtime"));
				dto1.setName(rs.getString("name"));
				dto1.setStats(rs.getString("stats"));
				dto1.setCourse(rs.getString("course"));

				yearr.add(dto1);
			}
			rs.close();
			return yearr;

		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return null;
	}
	
	
	public ArrayList<SSubjectDTO> subject(TeacherDTO dto) {
		try {

			String sql = " select round(s.출결률,2) as inoutday,s.subject as subject from " + 
					" (SELECT" + 
					" (COUNT" + 
					" (case" + 
					" when a.status = '출근' then 1" + 
					" end" + 
					" ) )" + 
					" /((SELECT COUNT" + 
					" (CASE" + 
					" WHEN TO_CHAR(v.regdate, 'd') IN ('7', '1') THEN NULL" + 
					" WHEN h.name is not null THEN NULL" + 
					" ELSE 1" + 
					" END) AS \"java교육기간의 일수\"" + 
					" FROM (SELECT TO_DATE('20190329', 'yyyymmdd') + level -1 AS regdate FROM dual" + 
					" CONNECT BY level <= (to_date('20190425', 'yyyymmdd')- TO_DATE('20190329', 'yyyymmdd') + 1)) v" + 
					" LEFT OUTER JOIN tblholiday h" + 
					" ON v.regdate = h.regdate)*30)*100 as 출결률," + 
					" CASE" + 
					" WHEN intime >= TO_DATE('2019-03-29', 'YYYY-MM-DD') AND " + 
					" intime <= TO_DATE('2019-04-25', 'YYYY-MM-DD') THEN 'ORACLE'" + 
					" END as subject" + 
					" FROM TBLATTENDED a" + 
					" GROUP BY(" + 
					" CASE" + 
					" WHEN intime >= TO_DATE('2019-03-29', 'YYYY-MM-DD') AND " + 
					" intime <= TO_DATE('2019-04-25', 'YYYY-MM-DD') THEN 'ORACLE'" + 
					" END" + 
					" )" + 
					" ) s where subject is not null" + 
					" union" + 
					" select round(s.출결률,2) as inoutday,s.subject as subject from " + 
					" (SELECT" + 
					" (COUNT" + 
					" (case" + 
					" when a.status = '출근' then 1" + 
					" end" + 
					" ) )" + 
					" /((SELECT COUNT" + 
					" (CASE" + 
					" WHEN TO_CHAR(v.regdate, 'd') IN ('7', '1') THEN NULL" + 
					" WHEN h.name is not null THEN NULL" + 
					" ELSE 1" + 
					" END) AS \"java교육기간의 일수\"" + 
					" FROM (SELECT TO_DATE('20190128', 'yyyymmdd') + level -1 AS regdate FROM dual" + 
					" CONNECT BY level <= (to_date('20190328', 'yyyymmdd')- TO_DATE('20190128', 'yyyymmdd') + 1)) v" + 
					" LEFT OUTER JOIN tblholiday h" + 
					" ON v.regdate = h.regdate)*30)*100 as 출결률," + 
					" CASE" + 
					" WHEN intime >= TO_DATE('2019-01-28', 'YYYY-MM-DD') AND " + 
					" intime <= TO_DATE('2019-03-28', 'YYYY-MM-DD') THEN 'JAVA'" + 
					" END as subject" + 
					" FROM TBLATTENDED a" + 
					" GROUP BY(" + 
					" CASE" + 
					" WHEN intime >= TO_DATE('2019-01-28', 'YYYY-MM-DD') AND " + 
					" intime <= TO_DATE('2019-03-28', 'YYYY-MM-DD') THEN 'JAVA'" + 
					" END" + 
					" )" + 
					" ) s where subject is not null " + 
					" order by subject";

			
			pstat = conn.prepareStatement(sql);
			
			
			String answer = dto.getName();
			
			
			ResultSet rs = pstat.executeQuery();

			ArrayList<SSubjectDTO> subject = new ArrayList<SSubjectDTO>();

			while (rs.next()) {
				SSubjectDTO dtoo = new SSubjectDTO();

				
				dtoo.setSubject(rs.getString("subject"));
				dtoo.setInoutday(rs.getString("inoutday"));
				subject.add(dtoo);
			}
			
			rs.close();
			return subject;

		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return null;
	}
	

	
	   
	  




}
